# This is a basic workflow to help you get started with Actions

name: Publish MeshInspector

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  find-private-release:
    timeout-minutes: 5
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.latest_tag.outputs.tag}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.MESHRUSBOT_TOKEN }}
        
      - name: Find MeshInspector latest tag
        uses: oprypin/find-latest-tag@v1
        id: latest_tag
        with:
          repository: MeshInspector/MeshInspectorCode
          releases-only: false
          token: ${{ secrets.RELEASE_MACHINE_TOKEN }}

      - name: Push empty commit
        run: |
          git config --global user.email "${{ secrets.MESHRUSBOT_EMAIL }}@gmail.com"
          git config --global user.name "MeshRusBot"
          git commit --allow-empty -m "Empty release commit"
          git tag ${{ steps.latest_tag.outputs.tag }}
          git push

  create-public-release:
    needs: [ find-private-release ]
    uses: MeshInspector/MeshInspector/.github/workflows/create-public-release.yml@master
    with:
      release_tag: ${{ needs.find-private-release.outputs.latest_tag }}
    secrets:
      RELEASE_MACHINE_TOKEN: ${{ secrets.MESHRUSBOT_TOKEN }}

  upload-public-release:
    if: ${{false}}
    needs: [ find-private-release, create-public-release ]
    timeout-minutes: 20
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      UPLOAD_URL: ${{ needs.create-public-release.outputs.upload_url }}
      RELEASE_TAG: ${{ needs.find-private-release.outputs.latest_tag }}
    steps:
      - name: Download private release
        uses: robinraju/release-downloader@v1.3
        with:
          repository: MeshInspector/MeshInspectorCode
          tag: ${{ env.RELEASE_TAG }}
          fileName: "*"
          out-file-path: "downloads"
          token: ${{ secrets.RELEASE_MACHINE_TOKEN }}

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/MeshInspectorInstaller_${{ env.RELEASE_TAG }}.msi
          asset_name: MeshInspectorInstaller_${{ env.RELEASE_TAG }}.msi
          asset_content_type: application/x-msi

      - name: Upload Ubuntu 20 Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/meshinspector_${{ env.RELEASE_TAG }}_ubuntu20.deb
          asset_name: meshinspector_${{ env.RELEASE_TAG }}_ubuntu20.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Ubuntu 22 Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/meshinspector_${{ env.RELEASE_TAG }}_ubuntu22.deb
          asset_name: meshinspector_${{ env.RELEASE_TAG }}_ubuntu22.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Fedora Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/meshinspector_${{ env.RELEASE_TAG }}.rpm
          asset_name: meshinspector_${{ env.RELEASE_TAG }}.rpm
          asset_content_type: application/octet-streame

      - name: Upload Apple x64 pkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: downloads/MeshInspector_${{ env.RELEASE_TAG }}_x64.pkg
          asset_name: MeshInspector_${{ env.RELEASE_TAG }}_x64.pkg
          asset_content_type: application/octet-streame

      - name: Upload Apple arm pkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: downloads/MeshInspector_${{ env.RELEASE_TAG }}_arm.pkg
          asset_name: MeshInspector_${{ env.RELEASE_TAG }}_arm.pkg
          asset_content_type: application/octet-streame
