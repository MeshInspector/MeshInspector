# This is a basic workflow to help you get started with Actions

name: Publish MeshInspector

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  publish:
    timeout-minutes: 40
    # The type of runner that the job will run on
    runs-on: [self-hosted]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        
      - name: Find MeshInspector latest tag
        uses: oprypin/find-latest-tag@v1
        id: latest_tag
        with:
          repository: MeshRUs/MeshInspector
          releases-only: false
          token: ${{ secrets.RELEASE_MACHINE_TOKEN }}

      - name: Download release
        uses: robinraju/release-downloader@v1.3
        with:
          repository: MeshRUs/MeshInspector
          tag: ${{ steps.latest_tag.outputs.tag }}
          fileName: "*"
          out-file-path: "downloads"
          token: ${{ secrets.RELEASE_MACHINE_TOKEN }}

      - name: Push empty commit
        run: |
          git commit --allow-empty -m "Empty release commit"
          git tag ${{ steps.latest_tag.outputs.tag }}
          git push

      - name: Create release
        id: create_release
        uses: MeshRUs/MeshInspectorReleases/.github/workflows/create-release.yml@master
        secrets:
          BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/MeshInspectorInstaller_${{ steps.latest_tag.outputs.tag }}.msi
          asset_name: MeshInspectorInstaller_${{ steps.latest_tag.outputs.tag }}.msi
          asset_content_type: application/x-msi

      - name: Upload Ubuntu Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/meshinspector_${{ steps.latest_tag.outputs.tag }}.deb
          asset_name: meshinspector_${{ steps.latest_tag.outputs.tag }}.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Fedora Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_MACHINE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: downloads/meshinspector_${{ steps.latest_tag.outputs.tag }}.rpm
          asset_name: meshinspector_${{ steps.latest_tag.outputs.tag }}.rpm
          asset_content_type: application/octet-streame